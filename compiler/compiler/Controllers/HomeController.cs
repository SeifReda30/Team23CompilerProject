using compiler.Models;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using System.Linq;

namespace compiler.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }
        [HttpGet]
        public IActionResult Index()
        {
            
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        Scanner scanner = new Scanner();

        ViewModel vm = new ViewModel()
        {
            correctTokens = new List<CorrectToken>(),
            wrongToken = new List<WrongToken>(),
        };

        [HttpPost]
        public async Task<IActionResult> ScanFileAsync(IFormFile FileSource)
        {
            
            // Uses Path.GetTempFileName to return a full path for a file, including the file name.
            string path = Path.GetTempFileName();
            using (var stream = System.IO.File.Create(path))
            {
                // The formFile is the method parameter which type is IFormFile
                // Saves the files to the local file system using a file name generated by the app.
                await FileSource.CopyToAsync(stream);
            }

            scanner = scanner.ScanningFile(path, scanner);
            vm.correctTokens = scanner.correctTokens;
            vm.wrongToken = scanner.wrongTokens;

            return View(vm);
        }
        [HttpPost]

        public IActionResult isCorrectToken(string word)
        
        {
            Scanner scanner = new Scanner();
            int CurrentState = 1;
            int NextState;
            foreach (char input in word)
            {
                NextState = scanner.GetNextState(CurrentState, input);
                if (NextState == 0)
                {
                    return BadRequest();
                }
                CurrentState = NextState;
            }
            return this.Ok();
        }


        ViewModel viewmod = new ViewModel()
        {
            correctTokens = new List<CorrectToken>(),
            wrongToken = new List<WrongToken>(),
        };

        [HttpPost]
        public IActionResult ScanEditor(string editorCode)
        {

            scanner = scanner.ScanningEditor(editorCode, scanner);
            viewmod.correctTokens = scanner.correctTokens;
            viewmod.wrongToken = scanner.wrongTokens;

            return View(viewmod);
        }


    }
}